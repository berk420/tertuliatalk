// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TertuliatalkAPI.Entities;

#nullable disable

namespace TertuliatalkAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "meeting_type", new[] { "PUBLIC", "INDIVIDUAL" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TertuliatalkAPI.Entities.IndividualMeeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PdfDocument")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("IndividualMeeting_pkey");

                    b.HasIndex("TeacherId");

                    b.ToTable("IndividualMeeting", (string)null);
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<int>("Maxparticipants")
                        .HasColumnType("integer")
                        .HasColumnName("maxparticipants");

                    b.Property<string>("Meetingname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meetingname");

                    b.Property<int?>("Participants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("participants");

                    b.Property<string>("Pdfdocument")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("pdfdocument");

                    b.Property<byte[]>("Pdfdocumentdata")
                        .HasColumnType("bytea")
                        .HasColumnName("pdfdocumentdata");

                    b.Property<DateTime>("Startdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("Meetings_pkey");

                    b.HasIndex("TeacherId");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.PublicMeeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Participants")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("PdfDocument")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PublicMeeting_pkey");

                    b.HasIndex("TeacherId");

                    b.ToTable("PublicMeeting", (string)null);
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.StudentMeeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uuid");

                    b.Property<string>("MeetingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("StudentMeeting_pkey");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMeeting", (string)null);
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Age")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Hobbies")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<string>("LanguageLevel")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.IndividualMeeting", b =>
                {
                    b.HasOne("TertuliatalkAPI.Entities.User", "Teacher")
                        .WithMany("IndividualMeetings")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_IndividualMeeting_User_TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.Meeting", b =>
                {
                    b.HasOne("TertuliatalkAPI.Entities.User", "Teacher")
                        .WithMany("Meetings")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("Meetings_teacher_id_fkey");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.PublicMeeting", b =>
                {
                    b.HasOne("TertuliatalkAPI.Entities.User", "Teacher")
                        .WithMany("PublicMeetings")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PublicMeeting_User_TeacherId");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.StudentMeeting", b =>
                {
                    b.HasOne("TertuliatalkAPI.Entities.User", "Student")
                        .WithMany("StudentMeetings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentMeeting_User_StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TertuliatalkAPI.Entities.User", b =>
                {
                    b.Navigation("IndividualMeetings");

                    b.Navigation("Meetings");

                    b.Navigation("PublicMeetings");

                    b.Navigation("StudentMeetings");
                });
#pragma warning restore 612, 618
        }
    }
}
